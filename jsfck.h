// characters
#define _space ([][_f+_l+_a+_t]+[])[_8]
#define _ecphoneme _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_4)+(_1)+_quotation)()
#define _quotation _string[_f+_o+_n+_t+_c+_o+_l+_o+_r]()[_1+[_2]]
#define _octothorpe _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_4)+(_3)+_quotation)()
#define _dollar _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_4)+(_4)+_quotation)()
#define _percent _Function(_r+_e+_t+_u+_r+_n+_space+_e+_s+_c+_a+_p+_e)()([][_f+_l+_a+_t])[_2+[_1]]
#define _ampersand _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_4)+(_6)+_quotation)()
#define _apostrophe _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_4)+(_7)+_quotation)()
#define _parenthesis_open ([][_f+_l+_a+_t]+[])[_1+[_3]]
#define _parenthesis_close ([_0]+_false+[][_f+_l+_a+_t])[_2+[_0]]
#define _asterisk _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_5)+(_2)+_quotation)()
#define _plus (+(_1+(_true+[])[_3]+[_1]+[_0]+[_0])+[])[_2]
#define _comma [[]][_c+_o+_n+_c+_a+_t]([[]])+[]
#define _hyphen (+(_0+_period+(_0)+(_0)+(_0)+(_0)+(_0)+(_0)+(_1))+[])[_2]
#define _period (+(_1+[_1]+_e+(_2)+(_0))+[])[_1]
#define _slash (_false+[_0])[_i+_t+_a+_l+_i+_c+_s]()[_1+[_0]]
#define _0 +[]
#define _1 +_true
#define _2 _true+_true
#define _3 _true+_true+_true
#define _4 _true+_true+_true+_true
#define _5 _true+_true+_true+_true+_true
#define _6 _true+_true+_true+_true+_true+_true
#define _7 _true+_true+_true+_true+_true+_true+_true
#define _8 _true+_true+_true+_true+_true+_true+_true+_true
#define _9 _true+_true+_true+_true+_true+_true+_true+_true+_true
#define _colon (_RegExp()+[])[_3]
#define _semicolon _string[_f+_o+_n+_t+_c+_o+_l+_o+_r](_NaN+_string[_f+_o+_n+_t+_c+_o+_l+_o+_r]()[_1+[_2]])[_2+[_1]]
#define _less _string[_i+_t+_a+_l+_i+_c+_s]()[_0]
#define _equals _string[_f+_o+_n+_t+_c+_o+_l+_o+_r]()[_1+[_1]]
#define _greater _string[_i+_t+_a+_l+_i+_c+_s]()[_2]
#define _eroteme (_RegExp+[])[_2]
#define _strudel _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_0)+(_0)+_quotation)()
#define _A (_NaN+[][_e+_n+_t+_r+_i+_e+_s]())[_1+[_1]]
#define _B (_0+_Boolean)[_1+[_0]]
#define _C _Function(_r+_e+_t+_u+_r+_n+_space+_e+_s+_c+_a+_p+_e)()(_string[_i+_t+_a+_l+_i+_c+_s]())[_2]
#define _D _Function(_r+_e+_t+_u+_r+_n+_space+_e+_s+_c+_a+_p+_e)()([][_f+_l+_a+_t])[_6+[_6]]
#define _E (_RegExp+[])[_1+[_2]]
#define _F (_0+_Function)[_1+[_0]]
#define _G (_false+_Function(_r+_e+_t+_u+_r+_n+_space+_D+_a+_t+_e)()())[_3+[_0]]
#define _H _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_1)+(_0)+_quotation)()
#define _I (+(_1+_e+(_1)+(_0)+(_0)+(_0))+[])[_0]
#define _J _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_1)+(_2)+_quotation)()
#define _K _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_1)+(_3)+_quotation)()
#define _L _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_1)+(_4)+_quotation)()
#define _M (_true+_Function(_r+_e+_t+_u+_r+_n+_space+_D+_a+_t+_e)()())[_3+[_0]]
#define _N (_NaN+[])[_0]
#define _O (_0+_Object)[_1+[_0]]
#define _P _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_2)+(_0)+_quotation)()
#define _Q _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_2)+(_1)+_quotation)()
#define _R (_0+_RegExp)[_1+[_0]]
#define _S (_0+_String)[_1+[_0]]
#define _T (_NaN+_Function(_r+_e+_t+_u+_r+_n+_space+_D+_a+_t+_e)()())[_3+[_0]]
#define _U (_NaN+_Object()[_t+_o+_String[_n+_a+_m+_e]][_c+_a+_l+_l]())[_1+[_1]]
#define _V _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_2)+(_6)+_quotation)()
#define _W _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_2)+(_7)+_quotation)()
#define _X _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_3)+(_0)+_quotation)()
#define _Y _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_3)+(_1)+_quotation)()
#define _Z _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_3)+(_2)+_quotation)()
#define _bracket_open ([][_e+_n+_t+_r+_i+_e+_s]()+[])[_0]
#define _backslash (_RegExp(_slash)+[])[_1]
#define _bracket_close ([][_e+_n+_t+_r+_i+_e+_s]()+[])[_2+[_2]]
#define _caret _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_3)+(_6)+_quotation)()
#define _underscore _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_3)+(_7)+_quotation)()
#define _grave _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_4)+(_0)+_quotation)()
#define _a (_false+[])[_1]
#define _b ([][_e+_n+_t+_r+_i+_e+_s]()+[])[_2]
#define _c ([][_f+_l+_a+_t]+[])[_3]
#define _d (_undefined+[])[_2]
#define _e (_true+[])[_3]
#define _f (_false+[])[_0]
#define _g (_false+[_0]+_String)[_1+[_0]]
#define _h (+(_1+[_0]+[_1]))[_t+_o+_String[_n+_a+_m+_e]](_2+[_1])[_1]
#define _i ([_false]+_undefined)[_1+[_0]]
#define _j ([][_e+_n+_t+_r+_i+_e+_s]()+[])[_3]
#define _k (+(_2+[_0]))[_t+_o+_String[_n+_a+_m+_e]](_2+[_1])
#define _l (_false+[])[_2]
#define _m (_Number+[])[_1+[_1]]
#define _n (_undefined+[])[_1]
#define _o (_true+[][_f+_l+_a+_t])[_1+[_0]]
#define _p (+(_2+[_1]+[_1]))[_t+_o+_String[_n+_a+_m+_e]](_3+[_1])[_1]
#define _q _string[_f+_o+_n+_t+_c+_o+_l+_o+_r](_false+[_0]+_string[_f+_o+_n+_t+_c+_o+_l+_o+_r]())[_3+[_2]]
#define _r (_true+[])[_1]
#define _s (_false+[])[_3]
#define _t (_true+[])[_0]
#define _u (_undefined+[])[_0]
#define _v ([][_f+_l+_a+_t]+[])[_2+[_3]]
#define _w (+(_3+[_2]))[_t+_o+_String[_n+_a+_m+_e]](_3+[_3])
#define _x (+(_1+[_0]+[_1]))[_t+_o+_String[_n+_a+_m+_e]](_3+[_4])[_1]
#define _y (_NaN+[+(_1+_e+(_1)+(_0)+(_0)+(_0))])[_1+[_0]]
#define _z (+(_3+[_5]))[_t+_o+_String[_n+_a+_m+_e]](_3+[_6])
#define _brace_open (_true+[][_f+_l+_a+_t])[_2+[_0]]
#define _pipe _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_7)+(_4)+_quotation)()
#define _brace_close ([][_f+_l+_a+_t]+[])[_3+[_2]]
#define _tilde _Function(_r+_e+_t+_u+_r+_n+_quotation+_backslash+(_1)+(_7)+(_6)+_quotation)()

// values
#define _false ![]
#define _true !_false
#define _NaN +[_false]
#define _undefined [][[]]
#define _string ([]+[])

// types
#define _Number (_0)[_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _String _string[_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _Array [][_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _Boolean (_false)[_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _Function [][_f+_l+_a+_t][_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _Object [][_e+_n+_t+_r+_i+_e+_s]()[_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]
#define _RegExp _Function(_r+_e+_t+_u+_r+_n+_slash+_false+_slash)()[_c+_o+_n+_s+_t+_r+_u+_c+_t+_o+_r]

_H+_e+_l+_l+_o+_comma+_space+_w+_o+_r+_l+_d+_ecphoneme
